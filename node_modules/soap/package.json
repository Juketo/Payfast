{
  "_args": [
    [
      {
        "raw": "soap",
        "scope": null,
        "escapedName": "soap",
        "name": "soap",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Git\\Nodejs REST\\payfast"
    ]
  ],
  "_from": "soap@latest",
  "_id": "soap@0.19.0",
  "_inCache": true,
  "_location": "/soap",
  "_nodeVersion": "4.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/soap-0.19.0.tgz_1489701082210_0.28222768707200885"
  },
  "_npmUser": {
    "name": "herom",
    "email": "h.romirer@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {
    "escape-html": "1.0.3",
    "on-finished": "2.3.0",
    "statuses": "1.3.1",
    "unpipe": "1.0.0"
  },
  "_requested": {
    "raw": "soap",
    "scope": null,
    "escapedName": "soap",
    "name": "soap",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/soap/-/soap-0.19.0.tgz",
  "_shasum": "e80d1ac07d43d2259869d5ca70f41499abf5f34e",
  "_shrinkwrap": null,
  "_spec": "soap",
  "_where": "D:\\Git\\Nodejs REST\\payfast",
  "author": {
    "name": "Vinay Pulim",
    "email": "v@pulim.com"
  },
  "bugs": {
    "url": "https://github.com/milewise/node-soap/issues"
  },
  "dependencies": {
    "compress": "^0.99.0",
    "concat-stream": "^1.5.1",
    "debug": "~0.7.4",
    "ejs": "~2.5.5",
    "finalhandler": "^0.5.0",
    "lodash": "^3.10.1",
    "optional": "^0.1.3",
    "request": ">=2.9.0",
    "sax": ">=0.6",
    "selectn": "^0.9.6",
    "serve-static": "^1.11.1",
    "strip-bom": "~0.3.1",
    "ursa": "0.8.5 || >=0.9.4",
    "uuid": "^3.0.1",
    "xml-crypto": "~0.8.0"
  },
  "description": "A minimal node SOAP client",
  "devDependencies": {
    "body-parser": "^1.15.2",
    "colors": "^1.1.2",
    "coveralls": "^2.11.6",
    "diff": "^2.2.1",
    "doctoc": "^1.0.0",
    "duplexer": "~0.1.1",
    "express": "^4.14.0",
    "glob": "~3.2.8",
    "istanbul": "^0.4.1",
    "jshint": "2.3.0",
    "mocha": "~1.17.0",
    "readable-stream": "~2.0.2",
    "semver": "~5.0.3",
    "should": "~3.3.0",
    "sinon": "^1.17.5",
    "timekeeper": "~0.0.4"
  },
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "e80d1ac07d43d2259869d5ca70f41499abf5f34e",
    "tarball": "https://registry.npmjs.org/soap/-/soap-0.19.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "bd762cc3a822fa699ad8bbceff753d58e5b2dafe",
  "homepage": "https://github.com/milewise/node-soap#readme",
  "keywords": [
    "soap"
  ],
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "vpulim",
      "email": "v@pulim.com"
    },
    {
      "name": "aaron",
      "email": "aaron.heckmann+github@gmail.com"
    },
    {
      "name": "jsdevel",
      "email": "js.developer.undefined@gmail.com"
    },
    {
      "name": "herom",
      "email": "h.romirer@gmail.com"
    }
  ],
  "name": "soap",
  "optionalDependencies": {
    "ursa": "0.8.5 || >=0.9.4"
  },
  "readme": "# Soap [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\r\n\r\n> A SOAP client and server for node.js.\r\n\r\nThis module lets you connect to web services using SOAP.  It also provides a server that allows you to run your own SOAP services.\r\n\r\n<!-- Run `npm run toc` to update below section -->\r\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\r\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\r\n\r\n\r\n- [Features:](#features)\r\n- [Install](#install)\r\n- [Where can I file an issue?](#where-can-i-file-an-issue)\r\n- [Module](#module)\r\n  - [soap.createClient(url[, options], callback) - create a new SOAP client from a WSDL url. Also supports a local filesystem path.](#soapcreateclienturl-options-callback---create-a-new-soap-client-from-a-wsdl-url-also-supports-a-local-filesystem-path)\r\n  - [soap.listen(*server*, *path*, *services*, *wsdl*) - create a new SOAP server that listens on *path* and provides *services*.](#soaplistenserver-path-services-wsdl---create-a-new-soap-server-that-listens-on-path-and-provides-services)\r\n  - [Options](#options)\r\n  - [Server Logging](#server-logging)\r\n  - [Server Events](#server-events)\r\n  - [SOAP Fault](#soap-fault)\r\n  - [Server security example using PasswordDigest](#server-security-example-using-passworddigest)\r\n  - [Server connection authorization](#server-connection-authorization)\r\n- [SOAP Headers](#soap-headers)\r\n  - [Received SOAP Headers](#received-soap-headers)\r\n  - [Outgoing SOAP Headers](#outgoing-soap-headers)\r\n- [Client](#client)\r\n  - [Client.describe() - description of services, ports and methods as a JavaScript object](#clientdescribe---description-of-services-ports-and-methods-as-a-javascript-object)\r\n  - [Client.setSecurity(security) - use the specified security protocol](#clientsetsecuritysecurity---use-the-specified-security-protocol)\r\n  - [Client.*method*(args, callback) - call *method* on the SOAP service.](#clientmethodargs-callback---call-method-on-the-soap-service)\r\n  - [Client.*service*.*port*.*method*(args, callback[, options[, extraHeaders]]) - call a *method* using a specific *service* and *port*](#clientserviceportmethodargs-callback-options-extraheaders---call-a-method-using-a-specific-service-and-port)\r\n  - [Client.*lastRequest* - the property that contains last full soap request for client logging](#clientlastrequest---the-property-that-contains-last-full-soap-request-for-client-logging)\r\n  - [Client.setEndpoint(url) - overwrite the SOAP service endpoint address](#clientsetendpointurl---overwrite-the-soap-service-endpoint-address)\r\n  - [Client Events](#client-events)\r\n- [Security](#security)\r\n  - [BasicAuthSecurity](#basicauthsecurity)\r\n  - [BearerSecurity](#bearersecurity)\r\n  - [ClientSSLSecurity](#clientsslsecurity)\r\n  - [WSSecurity](#wssecurity)\r\n  - [WSSecurityCert](#wssecuritycert)\r\n- [Handling XML Attributes, Value and XML (wsdlOptions).](#handling-xml-attributes-value-and-xml-wsdloptions)\r\n  - [Specifying the exact namespace definition of the root element](#specifying-the-exact-namespace-definition-of-the-root-element)\r\n- [Handling \"ignored\" namespaces](#handling-ignored-namespaces)\r\n- [Handling \"ignoreBaseNameSpaces\" attribute](#handling-ignorebasenamespaces-attribute)\r\n- [soap-stub](#soap-stub)\r\n  - [Example](#example)\r\n- [Contributors](#contributors)\r\n\r\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\r\n\r\n## Features:\r\n\r\n* Very simple API\r\n* Handles both RPC and Document schema types\r\n* Supports multiRef SOAP messages (thanks to [@kaven276](https://github.com/kaven276))\r\n* Support for both synchronous and asynchronous method handlers\r\n* WS-Security (currently only UsernameToken and PasswordText encoding is supported)\r\n* Supports [express](http://expressjs.com/) based web server(body parser middleware can be used)\r\n\r\n## Install\r\n\r\nInstall with [npm](http://github.com/isaacs/npm):\r\n\r\n```\r\n  npm install soap\r\n```\r\n\r\n## Where can I file an issue?\r\n\r\nWe've disabled issues in the repository and are now solely reviewing pull requests.  The reasons why we disabled issues can be found here [#731](https://github.com/vpulim/node-soap/pull/731).\r\n\r\nIf you're in need of support we encourage you to join us and other `node-soap` users on gitter:\r\n\r\n[![Gitter chat][gitter-image]][gitter-url]\r\n\r\n## Module\r\n\r\n### soap.createClient(url[, options], callback) - create a new SOAP client from a WSDL url. Also supports a local filesystem path.\r\n\r\n``` javascript\r\n  var soap = require('soap');\r\n  var url = 'http://example.com/wsdl?wsdl';\r\n  var args = {name: 'value'};\r\n  soap.createClient(url, function(err, client) {\r\n      client.MyFunction(args, function(err, result) {\r\n          console.log(result);\r\n      });\r\n  });\r\n```\r\nThis client has a built in WSDL cache. You can use the `disableCache` option to disable it.\r\n\r\n#### Options\r\n\r\nThe `options` argument allows you to customize the client with the following properties:\r\n\r\n- endpoint: to override the SOAP service's host specified in the `.wsdl` file.\r\n- envelopeKey: to set specific key instead of `<pre><<b>soap</b>:Body></<b>soap</b>:Body></pre>`.\r\n- escapeXML: escape special XML characters in SOAP message (e.g. `&`, `>`, `<` etc).\r\n- forceSoap12Headers: to set proper headers for SOAP v1.2.\r\n- httpClient: to provide your own http client that implements `request(rurl, data, callback, exheaders, exoptions)`.\r\n- request: to override the [request](https://github.com/request/request) module.\r\n- wsdl_headers: custom HTTP headers to be sent on WSDL requests.\r\n- wsdl_options: custom options for the request module on WSDL requests.\r\n- disableCache: don't cache WSDL files, request them every time.\r\n\r\nNote: for versions of node >0.10.X, you may need to specify `{connection: 'keep-alive'}` in SOAP headers to avoid truncation of longer chunked responses.\r\n\r\n### soap.listen(*server*, *path*, *services*, *wsdl*) - create a new SOAP server that listens on *path* and provides *services*.\r\n*server* can be a [http](https://nodejs.org/api/http.html) Server or [express](http://expressjs.com/) framework based server\r\n*wsdl* is an xml string that defines the service.\r\n\r\n``` javascript\r\n  var myService = {\r\n      MyService: {\r\n          MyPort: {\r\n              MyFunction: function(args) {\r\n                  return {\r\n                      name: args.name\r\n                  };\r\n              },\r\n\r\n              // This is how to define an asynchronous function.\r\n              MyAsyncFunction: function(args, callback) {\r\n                  // do some work\r\n                  callback({\r\n                      name: args.name\r\n                  });\r\n              },\r\n\r\n              // This is how to receive incoming headers\r\n              HeadersAwareFunction: function(args, cb, headers) {\r\n                  return {\r\n                      name: headers.Token\r\n                  };\r\n              },\r\n\r\n              // You can also inspect the original `req`\r\n              reallyDetailedFunction: function(args, cb, headers, req) {\r\n                  console.log('SOAP `reallyDetailedFunction` request from ' + req.connection.remoteAddress);\r\n                  return {\r\n                      name: headers.Token\r\n                  };\r\n              }\r\n          }\r\n      }\r\n  };\r\n\r\n  var xml = require('fs').readFileSync('myservice.wsdl', 'utf8');\r\n\r\n  //http server example\r\n  var server = http.createServer(function(request,response) {\r\n      response.end(\"404: Not Found: \" + request.url);\r\n  });\r\n\r\n  server.listen(8000);\r\n  soap.listen(server, '/wsdl', myService, xml);\r\n\r\n  //express server example\r\n  var app = express();\r\n  //body parser middleware are supported (optional)\r\n  app.use(bodyParser.raw({type: function(){return true;}, limit: '5mb'}));\r\n  app.listen(8001, function(){\r\n      //Note: /wsdl route will be handled by soap module\r\n      //and all other routes & middleware will continue to work\r\n      soap.listen(app, '/wsdl', service, xml);\r\n  });\r\n\r\n```\r\n\r\n### Options\r\nYou can pass in server and [WSDL Options](#handling-xml-attributes-value-and-xml-wsdloptions)\r\nusing an options hash.\r\n\r\n``` javascript\r\nvar xml = require('fs').readFileSync('myservice.wsdl', 'utf8');\r\n\r\nsoap.listen(server, {\r\n    // Server options.\r\n    path: '/wsdl',\r\n    services: myService,\r\n    xml: xml,\r\n\r\n    // WSDL options.\r\n    attributesKey: 'theAttrs',\r\n    valueKey: 'theVal',\r\n    xmlKey: 'theXml'\r\n});\r\n```\r\n\r\n### Server Logging\r\n\r\nIf the `log` method is defined it will be called with 'received' and 'replied'\r\nalong with data.\r\n\r\n``` javascript\r\n  server = soap.listen(...)\r\n  server.log = function(type, data) {\r\n    // type is 'received' or 'replied'\r\n  };\r\n```\r\n\r\n### Server Events\r\n\r\nServer instances emit the following events:\r\n\r\n* request - Emitted for every received messages.\r\n  The signature of the callback is `function(request, methodName)`.\r\n* headers - Emitted when the SOAP Headers are not empty.\r\n  The signature of the callback is `function(headers, methodName)`.\r\n\r\nThe sequence order of the calls is `request`, `headers` and then the dedicated\r\nservice method.\r\n\r\n### SOAP Fault\r\n\r\nA service method can reply with a SOAP Fault to a client by `throw`ing an\r\nobject with a `Fault` property.\r\n\r\n``` javascript\r\n  throw {\r\n    Fault: {\r\n      Code: {\r\n        Value: \"soap:Sender\",\r\n        Subcode: { value: \"rpc:BadArguments\" }\r\n      },\r\n      Reason: { Text: \"Processing Error\" }\r\n    }\r\n  };\r\n```\r\n\r\nTo change the HTTP statusCode of the response include it on the fault.  The statusCode property will not be put on the xml message.\r\n\r\n``` javascript\r\n  throw {\r\n    Fault: {\r\n      Code: {\r\n        Value: \"soap:Sender\",\r\n        Subcode: { value: \"rpc:BadArguments\" }\r\n      },\r\n      Reason: { Text: \"Processing Error\" },\r\n      statusCode: 500\r\n    }\r\n  };\r\n```\r\n\r\n### Server security example using PasswordDigest\r\n\r\nIf `server.authenticate` is not defined then no authentication will take place.\r\n\r\n``` javascript\r\n  server = soap.listen(...)\r\n  server.authenticate = function(security) {\r\n    var created, nonce, password, user, token;\r\n    token = security.UsernameToken, user = token.Username,\r\n            password = token.Password, nonce = token.Nonce, created = token.Created;\r\n    return user === 'user' && password === soap.passwordDigest(nonce, created, 'password');\r\n  };\r\n```\r\n\r\n### Server connection authorization\r\n\r\nThe `server.authorizeConnection` method is called prior to the soap service method.\r\nIf the method is defined and returns `false` then the incoming connection is\r\nterminated.\r\n\r\n``` javascript\r\n  server = soap.listen(...)\r\n  server.authorizeConnection = function(req) {\r\n    return true; // or false\r\n  };\r\n```\r\n\r\n\r\n## SOAP Headers\r\n\r\n### Received SOAP Headers\r\n\r\nA service method can look at the SOAP headers by providing a 3rd arguments.\r\n\r\n``` javascript\r\n  {\r\n      HeadersAwareFunction: function(args, cb, headers) {\r\n          return {\r\n              name: headers.Token\r\n          };\r\n      }\r\n  }\r\n```\r\n\r\nIt is also possible to subscribe to the 'headers' event.\r\nThe event is triggered before the service method is called, and only when the\r\nSOAP Headers are not empty.\r\n\r\n``` javascript\r\n  server = soap.listen(...)\r\n  server.on('headers', function(headers, methodName) {\r\n    // It is possible to change the value of the headers\r\n    // before they are handed to the service method.\r\n    // It is also possible to throw a SOAP Fault\r\n  });\r\n```\r\n\r\nFirst parameter is the Headers object;\r\nsecond parameter is the name of the SOAP method that will called\r\n(in case you need to handle the headers differently based on the method).\r\n\r\n### Outgoing SOAP Headers\r\n\r\nBoth client & server can define SOAP headers that will be added to what they send.\r\nThey provide the following methods to manage the headers.\r\n\r\n\r\n#### *addSoapHeader*(soapHeader[, name, namespace, xmlns]) - add soapHeader to soap:Header node\r\n##### Parameters\r\n - `soapHeader`     Object({rootName: {name: \"value\"}}) or strict xml-string\r\n\r\n##### Returns\r\nThe index where the header is inserted.\r\n\r\n##### Optional parameters when first arg is object :\r\n - `name`           Unknown parameter (it could just a empty string)\r\n - `namespace`      prefix of xml namespace\r\n - `xmlns`          URI\r\n\r\n#### *changeSoapHeader*(index, soapHeader[, name, namespace, xmlns]) - change an already existing soapHeader\r\n##### Parameters\r\n - `index`          index of the header to replace with provided new value\r\n - `soapHeader`     Object({rootName: {name: \"value\"}}) or strict xml-string\r\n\r\n#### *getSoapHeaders*() - return all defined headers\r\n\r\n#### *clearSoapHeaders*() - remove all defined headers\r\n\r\n\r\n## Client\r\n\r\nAn instance of `Client` is passed to the `soap.createClient` callback.  It is used to execute methods on the soap service.\r\n\r\n### Client.describe() - description of services, ports and methods as a JavaScript object\r\n\r\n``` javascript\r\n  client.describe() // returns\r\n    {\r\n      MyService: {\r\n        MyPort: {\r\n          MyFunction: {\r\n            input: {\r\n              name: 'string'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\n### Client.setSecurity(security) - use the specified security protocol\r\n\r\n### Client.*method*(args, callback) - call *method* on the SOAP service.\r\n\r\n``` javascript\r\n  client.MyFunction({name: 'value'}, function(err, result, raw, soapHeader) {\r\n      // result is a javascript object\r\n      // raw is the raw response\r\n      // soapHeader is the response soap header as a javascript object\r\n  })\r\n```\r\n### Client.*service*.*port*.*method*(args, callback[, options[, extraHeaders]]) - call a *method* using a specific *service* and *port*\r\n\r\n``` javascript\r\n  client.MyService.MyPort.MyFunction({name: 'value'}, function(err, result) {\r\n      // result is a javascript object\r\n  })\r\n```\r\n\r\n#### Options (optional)\r\n - Accepts any option that the request module accepts, see [here.](https://github.com/mikeal/request)\r\n - For example, you could set a timeout of 5 seconds on the request like this:\r\n``` javascript\r\n  client.MyService.MyPort.MyFunction({name: 'value'}, function(err, result) {\r\n      // result is a javascript object\r\n  }, {timeout: 5000})\r\n```\r\n\r\n- You can measure the elapsed time on the request by passing the time option:\r\n``` javascript\r\n  client.MyService.MyPort.MyFunction({name: 'value'}, function(err, result) {\r\n      // client.lastElapsedTime - the elapsed time of the last request in milliseconds\r\n  }, {time: true})\r\n```\r\n\r\n#### Extra Headers (optional)\r\n\r\nObject properties define extra HTTP headers to be sent on the request.\r\n\r\n- Add custom User-Agent:\r\n```javascript\r\nclient.addHttpHeader('User-Agent', `CustomUserAgent`);\r\n```\r\n\r\n#### Alternative method call using callback-last pattern\r\n\r\nTo align method call signature with node' standard callback-last patter and event allow promisification of method calls, the following method signatures are also supported:\r\n\r\n```javascript\r\nclient.MyService.MyPort.MyFunction({name: 'value'}, options, function (err, result) {\r\n  // result is a javascript object\r\n})\r\n\r\nclient.MyService.MyPort.MyFunction({name: 'value'}, options, extraHeaders, function (err, result) {\r\n  // result is a javascript object\r\n})\r\n```\r\n\r\n###Overriding the namespace prefix\r\n`node-soap` is still working out some kinks regarding namespaces.  If you find that an element is given the wrong namespace prefix in the request body, you can add the prefix to it's name in the containing object.  I.E.:\r\n\r\n```javascript\r\n  client.MyService.MyPort.MyFunction({'ns1:name': 'value'}, function(err, result) {\r\n      // request body sent with `<ns1:name`, regardless of what the namespace should have been.\r\n  }, {timeout: 5000})\r\n```\r\n\r\n- Remove namespace prefix of param\r\n\r\n```javascript\r\n  client.MyService.MyPort.MyFunction({':name': 'value'}, function(err, result) {\r\n      // request body sent with `<name`, regardless of what the namespace should have been.\r\n  }, {timeout: 5000})\r\n```\r\n\r\n### Client.*lastRequest* - the property that contains last full soap request for client logging\r\n\r\n### Client.setEndpoint(url) - overwrite the SOAP service endpoint address\r\n\r\n### Client Events\r\nClient instances emit the following events:\r\n\r\n* request - Emitted before a request is sent. The event handler receives the\r\nentire Soap request (Envelope) including headers. The second parameter is the exchange id.\r\n* message - Emitted before a request is sent. The event handler receives the\r\nSoap body contents. Useful if you don't want to log /store Soap headers. The second parameter is the exchange id.\r\n* soapError - Emitted when an erroneous response is received.\r\n  Useful if you want to globally log errors.\r\n  The second parameter is the exchange id.\r\n* response - Emitted after a response is received. The event handler receives\r\nthe SOAP response body as well as the entire `IncomingMessage` response object.\r\nThe third parameter is the exchange id.\r\nThis is emitted for all responses (both success and errors).\r\n\r\nAn 'exchange' is a request/response couple.\r\nEvent handlers receive the exchange id in all events.\r\nThe exchange id is the same for the requests events and the responses events, this way you can use it to retrieve the matching request\r\nwhen an response event is received.\r\n\r\nBy default exchange ids are generated by using node-uuid but you can use options in client calls to pass your own exchange id.\r\n\r\nExample :\r\n\r\n```javascript\r\n  client.MyService.MyPort.MyFunction(args , function(err, result) {\r\n\r\n  }, {exchangeId: myExchangeId})\r\n```\r\n\r\n\r\n## Security\r\n\r\n`node-soap` has several default security protocols.  You can easily add your own\r\nas well.  The interface is quite simple. Each protocol defines 2 methods:\r\n* `addOptions` - a method that accepts an options arg that is eventually passed directly to `request`\r\n* `toXML` - a method that returns a string of XML.\r\n\r\n### BasicAuthSecurity\r\n\r\n``` javascript\r\n  client.setSecurity(new soap.BasicAuthSecurity('username', 'password'));\r\n```\r\n\r\n### BearerSecurity\r\n\r\n``` javascript\r\n  client.setSecurity(new soap.BearerSecurity('token'));\r\n```\r\n\r\n### ClientSSLSecurity\r\n\r\n_Note_: If you run into issues using this protocol, consider passing these options\r\nas default request options to the constructor:\r\n* `rejectUnauthorized: false`\r\n* `strictSSL: false`\r\n* `secureOptions: constants.SSL_OP_NO_TLSv1_2` (this is likely needed for node >= 10.0)\r\n\r\n``` javascript\r\n  client.setSecurity(new soap.ClientSSLSecurity(\r\n    '/path/to/key'\r\n    , '/path/to/cert'\r\n    , {/*default request options*/}\r\n  ));\r\n```\r\n\r\n### WSSecurity\r\n\r\n`WSSecurity` implements WS-Security. UsernameToken and PasswordText/PasswordDigest is supported.\r\n\r\n``` javascript\r\n  var wsSecurity = new WSSecurity(username, password, options)\r\n    //the 'options' object is optional and contains properties:\r\n    //passwordType: 'PasswordDigest' or 'PasswordText' default is PasswordText\r\n    //hasTimeStamp: true or false, default is true\r\n    //hasTokenCreated: true or false, default is true\r\n    //hasNonce: includes Nonce if set\r\n    //mustUnderstand: adds `mustUnderstand=1` to header\r\n    //actor: adds actor to security block\r\n  client.setSecurity(wsSecurity);\r\n```\r\n\r\n### WSSecurityCert\r\n\r\nWS-Security X509 Certificate support.\r\n\r\n``` javascript\r\n  var privateKey = fs.readFileSync(privateKeyPath);\r\n  var publicKey = fs.readFileSync(publicKeyPath);\r\n  var password = ''; // optional password\r\n  var wsSecurity = new soap.WSSecurityCert(privateKey, publicKey, password, 'utf8');\r\n  client.setSecurity(wsSecurity);\r\n```\r\n\r\n_Note_: Optional dependency 'ursa' is required to be installed successfully when WSSecurityCert is used.\r\n\r\n## Handling XML Attributes, Value and XML (wsdlOptions).\r\nSometimes it is necessary to override the default behaviour of `node-soap` in order to deal with the special requirements\r\nof your code base or a third library you use. Therefore you can use the `wsdlOptions` Object, which is passed in the\r\n`#createClient()` method and could have any (or all) of the following contents:\r\n```javascript\r\nvar wsdlOptions = {\r\n  attributesKey: 'theAttrs',\r\n  valueKey: 'theVal',\r\n  xmlKey: 'theXml'\r\n}\r\n```\r\nIf nothing (or an empty Object `{}`) is passed to the `#createClient()` method, the `node-soap` defaults (`attributesKey: 'attributes'`, `valueKey: '$value'` and `xmlKey: '$xml'`) are used.\r\n\r\n###Overriding the `value` key\r\nBy default, `node-soap` uses `$value` as key for any parsed XML value which may interfere with your other code as it\r\ncould be some reserved word, or the `$` in general cannot be used for a key to start with.\r\n\r\nYou can define your own `valueKey` by passing it in the `wsdl_options` to the createClient call like so:\r\n```javascript\r\nvar wsdlOptions = {\r\n  valueKey: 'theVal'\r\n};\r\n\r\nsoap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\r\n  // your code\r\n});\r\n```\r\n\r\n###Overriding the `xml` key\r\nAs `valueKey`, `node-soap` uses `$xml` as key. The xml key is used to pass XML Object without adding namespace or parsing the string.\r\n\r\nExample :\r\n\r\n```javascript\r\ndom = {\r\n     $xml: '<parentnode type=\"type\"><childnode></childnode></parentnode>'\r\n};\r\n```\r\n\r\n```xml\r\n<tns:dom>\r\n    <parentnode type=\"type\">\r\n          <childnode></childnode>\r\n    </parentnode>\r\n</tns:dom>\r\n```\r\n\r\nYou can define your own `xmlKey` by passing it in the `wsdl_options` to the createClient call like so:\r\n```javascript\r\nvar wsdlOptions = {\r\n  xmlKey: 'theXml'\r\n};\r\n\r\nsoap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\r\n  // your code\r\n});\r\n```\r\n\r\n###Overriding the `attributes` key\r\nYou can achieve attributes like:\r\n``` xml\r\n<parentnode>\r\n  <childnode name=\"childsname\">\r\n  </childnode>\r\n</parentnode>\r\n```\r\nBy attaching an attributes object to a node.\r\n``` javascript\r\n{\r\n  parentnode: {\r\n    childnode: {\r\n      attributes: {\r\n        name: 'childsname'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nHowever, \"attributes\" may be a reserved key for some systems that actually want a node\r\n```xml\r\n<attributes>\r\n</attributes>\r\n```\r\n\r\nIn this case you can configure the attributes key in the `wsdlOptions` like so.\r\n```javascript\r\nvar wsdlOptions = {\r\n  attributesKey: '$attributes'\r\n};\r\n\r\nsoap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\r\n  client.*method*({\r\n    parentnode: {\r\n      childnode: {\r\n        $attributes: {\r\n          name: 'childsname'\r\n        }\r\n      }\r\n    }\r\n  });\r\n});\r\n```\r\n### Specifying the exact namespace definition of the root element\r\nIn rare cases, you may want to precisely control the namespace definition that is included in the root element.\r\n\r\nYou can specify the namespace definitions by setting the overrideRootElement key in the `wsdlOptions` like so:\r\n```javascript\r\nvar wsdlOptions = {\r\n  \"overrideRootElement\": {\r\n    \"namespace\": \"xmlns:tns\",\r\n    \"xmlnsAttributes\": [{\r\n      \"name\": \"xmlns:ns2\",\r\n      \"value\": \"http://tempuri.org/\"\r\n    }, {\r\n      \"name\": \"xmlns:ns3\",\r\n      \"value\": \"http://sillypets.com/xsd\"\r\n    }]\r\n  }\r\n};\r\n```\r\n\r\nTo see it in practice, consider the sample files in: [test/request-response-samples/addPets__force_namespaces](https://github.com/vpulim/node-soap/tree/master/test/request-response-samples/addPets__force_namespaces)\r\n\r\n### Custom Deserializer\r\n\r\nSometimes it's useful to handle deserialization in your code instead of letting node-soap do it.\r\nFor example if the soap response contains dates that are not in a format recognized by javascript, you might want to use your own function to handle them.\r\n\r\nTo do so, you can pass an customDeserializer object in options. The properties of this object are the types that your deserializer handles itself.\r\n\r\nExample :\r\n```javascript\r\n\r\n   var wsdlOptions = {\r\n     customDeserializer = {\r\n\r\n       // this function will be used to any date found in soap responses\r\n       date: function (text, context) {\r\n         /* text is the value of the xml element.\r\n           context contains the name of the xml element and other infos :\r\n             {\r\n                 name: 'lastUpdatedDate',\r\n                 object: {},\r\n                 schema: 'xsd:date',\r\n                 id: undefined,\r\n                 nil: false\r\n             }\r\n\r\n          */\r\n         return text;\r\n       }\r\n     }\r\n   };\r\n\r\n   soap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\r\n     ...\r\n   });\r\n\r\n```\r\n\r\n## Handling \"ignored\" namespaces\r\nIf an Element in a `schema` definition depends on an Element which is present in the same namespace, normally the `tns:`\r\nnamespace prefix is used to identify this Element. This is not much of a problem as long as you have just one `schema` defined\r\n(inline or in a separate file). If there are more `schema` files, the `tns:` in the generated `soap` file resolved mostly to the parent `wsdl` file,\r\n which was obviously wrong.\r\n\r\n `node-soap` now handles namespace prefixes which shouldn't be resolved (because it's not necessary) as so called `ignoredNamespaces`\r\n which default to an Array of 3 Strings (`['tns', 'targetNamespace', 'typedNamespace']`).\r\n\r\n If this is not sufficient for your purpose you can easily add more namespace prefixes to this Array, or override it in its entirety\r\n by passing an `ignoredNamespaces` object within the `options` you pass in `soap.createClient()` method.\r\n\r\n A simple `ignoredNamespaces` object, which only adds certain namespaces could look like this:\r\n ```\r\n var options = {\r\n   ignoredNamespaces: {\r\n     namespaces: ['namespaceToIgnore', 'someOtherNamespace']\r\n   }\r\n }\r\n ```\r\n This would extend the `ignoredNamespaces` of the `WSDL` processor to `['tns', 'targetNamespace', 'typedNamespace', 'namespaceToIgnore', 'someOtherNamespace']`.\r\n\r\n If you want to override the default ignored namespaces you would simply pass the following `ignoredNamespaces` object within the `options`:\r\n ```\r\n var options = {\r\n     ignoredNamespaces: {\r\n       namespaces: ['namespaceToIgnore', 'someOtherNamespace'],\r\n       override: true\r\n     }\r\n   }\r\n ```\r\n This would override the default `ignoredNamespaces` of the `WSDL` processor to `['namespaceToIgnore', 'someOtherNamespace']`. (This shouldn't be necessary, anyways).\r\n\r\n If you want to override the default ignored namespaces you would simply pass the following `ignoredNamespaces` object within the `options`:\r\n ```\r\n var options = {\r\n     ignoredNamespaces: {\r\n       namespaces: ['namespaceToIgnore', 'someOtherNamespace'],\r\n       override: true\r\n     }\r\n   }\r\n ```\r\n This would override the default `ignoredNamespaces` of the `WSDL` processor to `['namespaceToIgnore', 'someOtherNamespace']`. (This shouldn't be necessary, anyways).\r\n\r\n## Handling \"ignoreBaseNameSpaces\" attribute\r\nIf an Element in a `schema` definition depends has a basenamespace defined but the request does not need that value, for example you have a \"sentJob\" with basenamespace \"v20\"\r\nbut the request need only: <sendJob> set in the tree structure, you need to set the ignoreBaseNameSpaces to true. This is set because in a lot of workaround the wsdl structure is not correctly\r\nset or the webservice bring errors.\r\n\r\nBy default the attribute is set to true.\r\nAn example to use:\r\n\r\nA simple `ignoredNamespaces` object, which only adds certain namespaces could look like this:\r\n```\r\nvar options = {\r\nignoredNamespaces: true\r\n}\r\n```\r\n\r\n## soap-stub\r\n\r\nUnit testing services that use soap clients can be very cumbersome.  In order to get\r\naround this you can use `soap-stub` in conjunction with `sinon` to stub soap with\r\nyour clients.\r\n\r\n### Example\r\n\r\n```javascript\r\n// test-initialization-script.js\r\nvar sinon = require('sinon');\r\nvar soapStub = require('soap/soap-stub');\r\n\r\nvar urlMyApplicationWillUseWithCreateClient = 'http://path-to-my-wsdl';\r\nvar clientStub = {\r\n  SomeOperation: sinon.stub()\r\n};\r\n\r\nclientStub.SomeOperation.respondWithError = soapStub.createErroringStub({..error json...});\r\nclientStub.SomeOperation.respondWithSuccess = soapStub.createRespondingStub({..success json...});\r\n\r\nsoapStub.registerClient('my client alias', urlMyApplicationWillUseWithCreateClient, clientStub);\r\n\r\n// test.js\r\nvar soapStub = require('soap/soap-stub');\r\n\r\ndescribe('myService', function() {\r\n  var clientStub;\r\n  var myService;\r\n\r\n  beforeEach(function() {\r\n    clientStub = soapStub.getStub('my client alias');\r\n    soapStub.reset();\r\n    myService.init(clientStub);\r\n  });\r\n\r\n  describe('failures', function() {\r\n    beforeEach(function() {\r\n      clientStub.SomeOperation.respondWithError();\r\n    });\r\n\r\n    it('should handle error responses', function() {\r\n      myService.somethingThatCallsSomeOperation(function(err, response) {\r\n        // handle the error response.\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n\r\n## Contributors\r\n\r\n * Author: [Vinay Pulim](https://github.com/vpulim)\r\n * Maintainers:\r\n   - [Joe Spencer](https://github.com/jsdevel)\r\n   - [Heinz Romirer](https://github.com/herom)\r\n * [All Contributors](https://github.com/vpulim/node-soap/graphs/contributors)\r\n\r\n[downloads-image]: http://img.shields.io/npm/dm/soap.svg\r\n[npm-url]: https://npmjs.org/package/soap\r\n[npm-image]: http://img.shields.io/npm/v/soap.svg\r\n\r\n[travis-url]: https://travis-ci.org/vpulim/node-soap\r\n[travis-image]: http://img.shields.io/travis/vpulim/node-soap.svg\r\n\r\n[gitter-url]: https://gitter.im/vpulim/node-soap\r\n[gitter-image]: https://badges.gitter.im/vpulim/node-soap.png\r\n\r\n[coveralls-url]: https://coveralls.io/r/vpulim/node-soap\r\n[coveralls-image]: http://img.shields.io/coveralls/vpulim/node-soap/master.svg\r\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/milewise/node-soap.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha -- --timeout 10000 test/*-test.js test/security/*.js",
    "coveralls": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js -v",
    "pretest": "jshint index.js lib test",
    "test": "mocha --timeout 10000 test/*-test.js test/security/*.js",
    "toc": "doctoc Readme.md --github --maxlevel 3"
  },
  "version": "0.19.0"
}
